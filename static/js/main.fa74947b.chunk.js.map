{"version":3,"sources":["components/Header.js","hooks/useFetch.js","components/CharPicker.js","components/PlanetPicker.js","components/CharSummary.js","components/Character.js","components/PlanetSummary.js","components/Planet.js","components/App.js","index.js"],"names":["Header","props","className","title","subtitle","defaultProps","useFetch","url","useState","data","setData","error","setError","isLoading","setIsLoading","useEffect","a","fetch","res","json","deets","CharPicker","charData","selectedCharacters","results","slice","map","char","index","name","id","content","side","chosenEntity","onChange","onCharSelect","value","selectedChar","disabled","hidden","key","PlanetPicker","planetData","selectedPlanets","onPlanetSelect","selectedPlanet","planet","CharSummary","gender","height","birthYear","hairColor","skinColor","movieCount","React","memo","loadedChar","colors","hair","hair_color","skin","skin_color","birth_year","films","length","PlanetSummary","diameter","climate","population","terrain","loadedPlanet","App","setChosenEntity","selectedCharacter","setSelectedCharacter","setSelectedPlanet","setSide","destruction","setDestruction","sideHandler","style","marginTop","event","charId","target","planetId","onClick","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.fa74947b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => (\r\n  <div className=\"header\">\r\n    <div className=\"content-container\">\r\n      <h1 className=\"header__title\">{props.title}</h1>\r\n      {props.subtitle && <h2 className=\"header__subtitle\">{props.subtitle}</h2>}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nHeader.defaultProps = {\r\n  title: 'Star Wars',\r\n  subtitle: 'May the force be with you',\r\n};\r\n\r\nexport default Header;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async (url) => {\r\n      setIsLoading(true);\r\n      try {\r\n        const res = await fetch(url);\r\n        const deets = await res.json();\r\n        setData(deets);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        setError(err);\r\n        setIsLoading(false);\r\n      }\r\n    })(url);\r\n  }, [url]);\r\n\r\n  return [isLoading, error, data];\r\n};\r\n\r\nexport default useFetch;\r\n","import React from 'react';\nimport useFetch from '../hooks/useFetch';\n\nconst CharPicker = (props) => {\n  const [isLoading, error, charData] = useFetch(\n    'https://swapi.dev/api/people/'\n  );\n\n  const selectedCharacters = charData\n    ? charData.results.slice(0, 9).map((char, index) => ({\n        name: char.name,\n        id: index + 1,\n      }))\n    : [];\n\n  let content = <p>Loading characters...</p>;\n\n  if (!isLoading && !error && selectedCharacters) {\n    let className = `dropdown dropdown--${props.side} ${\n      props.chosenEntity === 'character' ? 'active' : ''\n    }`;\n    content = (\n      <select\n        onChange={props.onCharSelect}\n        value={props.selectedChar}\n        className={className}\n      >\n        <option value=\"\" disabled hidden>\n          Choose a Character\n        </option>\n        {selectedCharacters.map((char) => (\n          <option key={char.id} value={char.id}>\n            {char.name}\n          </option>\n        ))}\n      </select>\n    );\n  } else if (!isLoading && error) {\n    content = <p>Could not fetch any data.</p>;\n  }\n  return content;\n};\n\nexport default CharPicker;\n","import React from 'react';\r\nimport useFetch from '../hooks/useFetch';\r\n\r\nconst PlanetPicker = (props) => {\r\n  const [isLoading, error, planetData] = useFetch(\r\n    'https://swapi.dev/api/planets/'\r\n  );\r\n\r\n  const selectedPlanets = planetData\r\n    ? planetData.results.slice(0, 9).map((char, index) => ({\r\n        name: char.name,\r\n        id: index + 1,\r\n      }))\r\n    : [];\r\n\r\n  let content = <p>Loading planets...</p>;\r\n\r\n  if (!isLoading && !error && selectedPlanets) {\r\n    let className = `dropdown dropdown--${props.side} ${\r\n      props.chosenEntity === 'planet' ? 'active' : ''\r\n    }`;\r\n    content = (\r\n      <select\r\n        onChange={props.onPlanetSelect}\r\n        value={props.selectedPlanet}\r\n        className={className}\r\n      >\r\n        <option value=\"\" disabled hidden>\r\n          Choose a Planet\r\n        </option>\r\n        {selectedPlanets.map((planet) => (\r\n          <option key={planet.id} value={planet.id}>\r\n            {planet.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    );\r\n  } else if (!isLoading && error) {\r\n    content = <p>Could not fetch any data.</p>;\r\n  }\r\n  return content;\r\n};\r\n\r\nexport default PlanetPicker;\r\n","import React from 'react';\n\nconst CharSummary = (props) => {\n  return (\n    <div className={`content-outline ${props.side}`}>\n      <h1 className=\"content-outline__title\">{props.name}</h1>\n      <p>\n        Gender: <span>{props.gender}</span>\n      </p>\n      <p>\n        Height: <span>{props.height}</span>\n      </p>\n      <p>\n        Birth Year: <span>{props.birthYear}</span>\n      </p>\n      <p>\n        Hair Color / Skin Color: <span>{props.hairColor}</span> /{' '}\n        <span>{props.skinColor}</span>\n      </p>\n      <p>\n        Appears in # Movies: <span>{props.movieCount}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default CharSummary;\n","import React from 'react';\nimport CharSummary from './CharSummary';\nimport useFetch from '../hooks/useFetch';\n\nconst Character = ({ selectedChar, side }) => {\n  const [isLoading, error, charData] = useFetch(\n    `https://swapi.dev/api/people/${selectedChar}/`\n  );\n\n  const loadedChar = charData\n    ? {\n        id: selectedChar,\n        name: charData.name,\n        height: charData.height,\n        colors: {\n          hair: charData.hair_color,\n          skin: charData.skin_color,\n        },\n        birthYear: charData.birth_year,\n        gender: charData.gender,\n        movieCount: charData.films.length,\n      }\n    : null;\n\n  let content = <p>Loading Character...</p>;\n\n  if (!isLoading && !error && loadedChar) {\n    content = (\n      <CharSummary\n        side={side}\n        name={loadedChar.name}\n        gender={loadedChar.gender}\n        height={loadedChar.height}\n        hairColor={loadedChar.colors.hair}\n        skinColor={loadedChar.colors.skin}\n        birthYear={loadedChar.birthYear}\n        movieCount={loadedChar.movieCount}\n      />\n    );\n  } else if (!isLoading && error) {\n    content = <p>Failed to fetch character.</p>;\n  }\n  return content;\n};\n\nexport default React.memo(Character);\n","import React from 'react';\r\n\r\nconst PlanetSummary = (props) => {\r\n  return (\r\n    <div className={`content-outline ${props.side}`}>\r\n      <h1 className=\"content-outline__title\">{props.name}</h1>\r\n      <p>\r\n        Diameter: <span>{props.diameter}</span>\r\n      </p>\r\n      <p>\r\n        Climate: <span>{props.climate}</span>\r\n      </p>\r\n      <p>\r\n        Population: <span>{props.population}</span>\r\n      </p>\r\n      <p>\r\n        Terrain: <span>{props.terrain}</span>\r\n      </p>\r\n      <p>\r\n        Appears in # Movies: <span>{props.movieCount}</span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlanetSummary;\r\n","import React from 'react';\r\nimport PlanetSummary from './PlanetSummary';\r\nimport useFetch from '../hooks/useFetch';\r\n\r\nconst Planet = ({ selectedPlanet, side }) => {\r\n  const [isLoading, error, planetData] = useFetch(\r\n    `https://swapi.dev/api/planets/${selectedPlanet}/`\r\n  );\r\n\r\n  const loadedPlanet = planetData\r\n    ? {\r\n        id: selectedPlanet,\r\n        name: planetData.name,\r\n        diameter: planetData.diameter,\r\n        climate: planetData.climate,\r\n        population: planetData.population,\r\n        terrain: planetData.terrain,\r\n        movieCount: planetData.films.length,\r\n      }\r\n    : null;\r\n\r\n  let content = <p>Loading planet...</p>;\r\n\r\n  if (!isLoading && !error && loadedPlanet) {\r\n    content = (\r\n      <PlanetSummary\r\n        side={side}\r\n        name={loadedPlanet.name}\r\n        diameter={loadedPlanet.diameter}\r\n        climate={loadedPlanet.climate}\r\n        population={loadedPlanet.population}\r\n        terrain={loadedPlanet.terrain}\r\n        movieCount={loadedPlanet.movieCount}\r\n      />\r\n    );\r\n  } else if (!isLoading && error) {\r\n    content = <p>Failed to fetch planet.</p>;\r\n  }\r\n  return content;\r\n};\r\n\r\nexport default React.memo(Planet);\r\n","import React, { useState } from 'react';\nimport Header from './Header';\nimport CharPicker from './CharPicker';\nimport PlanetPicker from './PlanetPicker';\nimport Character from './Character';\nimport Planet from './Planet';\n\nconst App = () => {\n  const [chosenEntity, setChosenEntity] = useState('character');\n  const [selectedCharacter, setSelectedCharacter] = useState(1);\n  const [selectedPlanet, setSelectedPlanet] = useState('');\n  const [side, setSide] = useState('light');\n  const [destruction, setDestruction] = useState(false);\n\n  const sideHandler = (side) => {\n    setSide(side);\n  };\n\n  const charSelectHandler = (event) => {\n    const charId = event.target.value;\n    setChosenEntity('character');\n    setSelectedCharacter(charId);\n    setSelectedPlanet('');\n  };\n\n  const planetSelectHandler = (event) => {\n    const planetId = event.target.value;\n    setChosenEntity('planet');\n    setSelectedPlanet(planetId);\n    setSelectedCharacter('');\n  };\n\n  const initiateDestruction = () => {\n    setDestruction(true);\n  };\n\n  const revertDestruction = () => {\n    setDestruction(false);\n    setSide('light');\n  };\n\n  let content = (\n    <>\n      <Header />\n      <div style={{ marginTop: '5rem' }} className=\"content-container\">\n        <div className=\"grid-auto\">\n          <CharPicker\n            chosenEntity={chosenEntity}\n            side={side}\n            selectedChar={selectedCharacter}\n            onCharSelect={charSelectHandler}\n          />\n          <PlanetPicker\n            chosenEntity={chosenEntity}\n            side={side}\n            selectedPlanet={selectedPlanet}\n            onPlanetSelect={planetSelectHandler}\n          />\n        </div>\n        {chosenEntity === 'character' && (\n          <Character selectedChar={selectedCharacter} side={side} />\n        )}\n        {chosenEntity === 'planet' && (\n          <div>\n            <Planet selectedPlanet={selectedPlanet} side={side} />\n          </div>\n        )}\n        <button className=\"button \" onClick={() => sideHandler('light')}>\n          Light Side\n        </button>\n        <button\n          className=\"button button--secondary\"\n          onClick={() => sideHandler('dark')}\n        >\n          Dark Side\n        </button>\n        {side === 'dark' && (\n          <button className=\"button button--dark\" onClick={initiateDestruction}>\n            DESTROY!\n          </button>\n        )}\n      </div>\n    </>\n  );\n\n  if (destruction) {\n    content = (\n      <>\n        <Header />\n        <div style={{ marginTop: '5rem' }} className=\"content-container\">\n          <h1>Total destruction!</h1>\n          <button className=\"button\" onClick={revertDestruction}>\n            Back To Light!\n          </button>\n        </div>\n      </>\n    );\n  }\n  return content;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'normalize.css/normalize.css';\nimport './styles/styles.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}